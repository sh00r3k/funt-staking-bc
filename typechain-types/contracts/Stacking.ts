/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface StackingInterface extends utils.Interface {
  functions: {
    "MIN_AMOUNT()": FunctionFragment;
    "ONE_YEAR()": FunctionFragment;
    "PENALTY_PERCENT()": FunctionFragment;
    "PERCENT_DIVIDER()": FunctionFragment;
    "TIME_STEP()": FunctionFragment;
    "adminTokens()": FunctionFragment;
    "deposit(uint8,uint256)": FunctionFragment;
    "getContractBalance()": FunctionFragment;
    "getPlanInfo(uint8)": FunctionFragment;
    "getUserAmountOfDeposits(address)": FunctionFragment;
    "getUserDepositInfo(address,uint256)": FunctionFragment;
    "getUserNegativeDividends(address,uint256)": FunctionFragment;
    "getUserTotalDeposits(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "plans(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "token()": FunctionFragment;
    "totalStacked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "users(address)": FunctionFragment;
    "usersDeposits(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawTokens(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MIN_AMOUNT"
      | "ONE_YEAR"
      | "PENALTY_PERCENT"
      | "PERCENT_DIVIDER"
      | "TIME_STEP"
      | "adminTokens"
      | "deposit"
      | "getContractBalance"
      | "getPlanInfo"
      | "getUserAmountOfDeposits"
      | "getUserDepositInfo"
      | "getUserNegativeDividends"
      | "getUserTotalDeposits"
      | "owner"
      | "plans"
      | "renounceOwnership"
      | "token"
      | "totalStacked"
      | "transferOwnership"
      | "users"
      | "usersDeposits"
      | "withdraw"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MIN_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE_YEAR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PENALTY_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TIME_STEP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAmountOfDeposits",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDepositInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNegativeDividends",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalDeposits",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "plans",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalStacked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "usersDeposits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "MIN_AMOUNT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE_YEAR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TIME_STEP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAmountOfDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDepositInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNegativeDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStacked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usersDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "NewDeposit(address,uint8,uint256)": EventFragment;
    "Newbie(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Newbie"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface NewDepositEventObject {
  user: string;
  plan: number;
  amount: BigNumber;
}
export type NewDepositEvent = TypedEvent<
  [string, number, BigNumber],
  NewDepositEventObject
>;

export type NewDepositEventFilter = TypedEventFilter<NewDepositEvent>;

export interface NewbieEventObject {
  user: string;
}
export type NewbieEvent = TypedEvent<[string], NewbieEventObject>;

export type NewbieEventFilter = TypedEventFilter<NewbieEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WithdrawnEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface Stacking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StackingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_YEAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    PENALTY_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENT_DIVIDER(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIME_STEP(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      plan: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getContractBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlanInfo(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { time: BigNumber; percent: BigNumber }
    >;

    getUserAmountOfDeposits(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserDepositInfo(
      userAddress: PromiseOrValue<string>,
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        plan: number;
        percent: BigNumber;
        amount: BigNumber;
        start: BigNumber;
        finish: BigNumber;
        isTaken: boolean;
      }
    >;

    getUserNegativeDividends(
      userAddress: PromiseOrValue<string>,
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserTotalDeposits(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    plans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { time: BigNumber; percent: BigNumber }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalStacked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { seedLoss: BigNumber; withdrawn: BigNumber }
    >;

    usersDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      amounts: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MIN_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

  PENALTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENT_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

  TIME_STEP(overrides?: CallOverrides): Promise<BigNumber>;

  adminTokens(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    plan: PromiseOrValue<BigNumberish>,
    amounts: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getPlanInfo(
    plan: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { time: BigNumber; percent: BigNumber }>;

  getUserAmountOfDeposits(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserDepositInfo(
    userAddress: PromiseOrValue<string>,
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      plan: number;
      percent: BigNumber;
      amount: BigNumber;
      start: BigNumber;
      finish: BigNumber;
      isTaken: boolean;
    }
  >;

  getUserNegativeDividends(
    userAddress: PromiseOrValue<string>,
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserTotalDeposits(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  plans(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { time: BigNumber; percent: BigNumber }>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  totalStacked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  users(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { seedLoss: BigNumber; withdrawn: BigNumber }
  >;

  usersDeposits(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    amounts: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MIN_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    PENALTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    TIME_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    adminTokens(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      plan: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getPlanInfo(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { time: BigNumber; percent: BigNumber }
    >;

    getUserAmountOfDeposits(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserDepositInfo(
      userAddress: PromiseOrValue<string>,
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        plan: number;
        percent: BigNumber;
        amount: BigNumber;
        start: BigNumber;
        finish: BigNumber;
        isTaken: boolean;
      }
    >;

    getUserNegativeDividends(
      userAddress: PromiseOrValue<string>,
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTotalDeposits(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    plans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { time: BigNumber; percent: BigNumber }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    totalStacked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { seedLoss: BigNumber; withdrawn: BigNumber }
    >;

    usersDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokens(
      amounts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewDeposit(address,uint8,uint256)"(
      user?: PromiseOrValue<string> | null,
      plan?: null,
      amount?: null
    ): NewDepositEventFilter;
    NewDeposit(
      user?: PromiseOrValue<string> | null,
      plan?: null,
      amount?: null
    ): NewDepositEventFilter;

    "Newbie(address)"(user?: null): NewbieEventFilter;
    Newbie(user?: null): NewbieEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Withdrawn(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    MIN_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    PENALTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    TIME_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    adminTokens(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      plan: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getPlanInfo(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAmountOfDeposits(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserDepositInfo(
      userAddress: PromiseOrValue<string>,
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserNegativeDividends(
      userAddress: PromiseOrValue<string>,
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTotalDeposits(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    plans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalStacked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usersDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      amounts: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_YEAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PENALTY_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENT_DIVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIME_STEP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      plan: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getContractBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanInfo(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserAmountOfDeposits(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserDepositInfo(
      userAddress: PromiseOrValue<string>,
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserNegativeDividends(
      userAddress: PromiseOrValue<string>,
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTotalDeposits(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStacked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usersDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      amounts: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
